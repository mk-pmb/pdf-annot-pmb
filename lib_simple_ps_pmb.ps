%!PS-Adobe-3.0 EPSF-3.0
% -*- coding: latin-1 -*-

/LIB_SIMPLE_PS_PMB 8 dict def %%autoupdate:LIB_SIMPLE_PS_PMB:start%%
%%{ "version": "0.1.2" }
/PMBPS {
  dup type /nametype ne { exch } if
  LIB_SIMPLE_PS_PMB exch get exec
} bind def
LIB_SIMPLE_PS_PMB begin
  /orig_showpage { showpage } bind def
  /typeof { dup where { exch get type } { pop /undefined } ifelse } def
  /defined { where dup { exch pop } if } def
  /eqeq { == } def

  /getifhas { 2 dict begin
    /@args [
      /dict /key
      /prepare  ( Executed if the key was known, with value on the stack.)
      /default  ( Executed if otherwise, can be used to push a default value.)
      ] def
    end
    4 2 roll 2 copy known { get 3 1 roll } { pop pop exch } ifelse pop exec
  } def

  /linespacing 0 def
  /CurrentFontSize 0 def

  /configure_page_size { LIB_SIMPLE_PS_PMB begin
    /@args <<
      /ULU    ( User Length Unit. Can be a float (how many ULU per one inch?)
                or one of these strings: (inch) (mm) (cm) )
      /w      ( page width in ULU)
      /h      ( page height in ULU)
      /upside ( page orientation, one of: (up) (down) (left) (right) )
      >> def
    /@args exch def
    /ULU_per_inch @args /ULU get def
    << % pre-defined ULU
      (cm)    2.54
      (inch)  1
      (mm)    25.4
      >> ULU_per_inch { /ULU_per_inch exch def } {} getifhas
    /pageWidth  @args /w get def
    /pageHeight @args /h get def
  end } bind def

  /initpage { LIB_SIMPLE_PS_PMB begin
    /configure_page_size PMBPS
    initgraphics
    /DeviceRGB setcolorspace
    << /PageSize [
        pageWidth  ULU_per_inch div
        pageHeight ULU_per_inch div
        ] def
      /Orientation << (up) 0 (right) 2 (down) 2 (left) 2
        >> @args /upside {} { null } getifhas {} { 0 } getifhas
      /ImagingBBox null
      >> setpagedevice
    << /ULU_per_inch ULU_per_inch >> scale_ULU
    0 0 moveto
    1 0 0 setrgbcolor
    /Helvetica 10 select_font
  end } bind def

  /scale_ULU { /ULU_per_inch get 72 exch div dup scale } def
  /scale_to_mm { 72 25.4 div dup scale } def

  /pagesize_a4_mm_upright { << /w 210 /h 297 /ULU (mm) /upside (up) >> } def

  /initpage_a4_mm_upright {
    /pagesize_a4_mm_upright PMBPS
    /initpage PMBPS
  } bind def

  /setblack {
    1 exch sub
    % ^-- gray = white-ness = 1 - blackness
    dup dup setrgbcolor
    % ^-- RGB: b/c "setgray" causes black dither on HP Color LaserJet CP1515n
  } bind def

  /rgb_line { dict
    %%arg:rgb   [r, g, b] each as fraction
    %%arg:from  [x y]
    %%arg:to    [x y]
    gsave newpath
      dup /from get dup /x get dup /y get moveto pop
      dup /r get dup /g get dup /b get setrgbcolor pop
      dup /to get dup /x get dup /y get lineto pop
      stroke
    grestore pop
  } def

  /rgb_line_coordsys {
    gsave
      5 setlinewidth
      %% red and blue channel: 0 = +, 1 = -
      0 1 0 0 0  20  50 rgb_line
      0 0 1 0 0  20 -50 rgb_line
      1 0 0 0 0 -20  50 rgb_line
      1 0 1 0 0 -20 -50 rgb_line
    grestore
  } def

  /select_font { LIB_SIMPLE_PS_PMB begin
    /@args [ /FontName /FontSize ] def
    % e.g. /Courier 10
    /CurrentFontSize exch def   % save the font size for later use in /para.
    /CurrentFontName exch def
    /CurrentFontLatin1 CurrentFontName length dict begin
      CurrentFontName findfont {def} forall   % copy all font data
      /Encoding ISOLatin1Encoding def         % but replace encoding
      currentdict
    end definefont CurrentFontSize scalefont setfont
  end } bind def

  /ENTstr_mdash (\255) def
  /ENTstr_hyphen (-) def

  /fancy_show { LIB_SIMPLE_PS_PMB begin
    /skip_char () def
    {
      /charnum exch def
      /charstr (_) def
      charstr 0 charnum put
      skip_char charstr eq { /charstr () def } { /skip_char () def } ifelse
      (\n) charstr eq { /charstr ( ) def /skip_char ( ) def } if
      (\t) charstr eq { /charstr (        ) def } if
      ENTstr_hyphen charstr eq { /charstr ENTstr_mdash def } {
        ENTstr_mdash charstr eq { /charstr ENTstr_hyphen def } if
      } ifelse
      (¦) charstr eq {
        /Euro glyphshow
        /charstr () def
        } if
      (\b) charstr eq {
        gsave 0 CurrentFontSize 0.070 mul neg rmoveto ENTstr_mdash show
        grestore
        /charstr () def
        } if
      charstr () ne { charstr show } if
    } forall
  } bind def

  /print_mxty { LIB_SIMPLE_PS_PMB begin
    /@args [ /deltaX /deltaY /text ] def
    exch neg    % pull up -y
    0 exch      % put x=0 in front
    translate
    gsave
      exch 0 moveto         % pull up x and move to it
      fancy_show
    grestore
  end } bind def

  /print_text_block { LIB_SIMPLE_PS_PMB begin
    gsave
    % use an anon dict as namespace for internal subprocs:
    16 dict begin
    /printall { { each_item } forall } def
    /stringtype {
      0 CurrentFontSize neg translate
      0 0 moveto
      cur_item fancy_show
      0 linespacing neg translate
    } def   % stringtype
    /arraytype { cur_item aload pop cvx exec } def
    /nametype { cur_item cvx exec } def
    /each_item {
      /cur_item exch def
      /cur_type cur_item type def
      % [(current line:) currentdict /cur_type get cur_item] ==
      cur_type
    } def
    printall
    end   % no pop: we didn't put it onto the operand stack (currentdict)
    grestore
  end } def

  /print_text_left_top { LIB_SIMPLE_PS_PMB begin
    gsave
    pageHeight exch sub translate
    print_text_block
    grestore
  end } def

  /linerect { 1 dict begin
    /@args <<
      /top    ()
      /left   ()
      /width  ()
      /height ()
      >> def
    /@args exch def
    gsave
      newpath
        @args /left get pageHeight @args /top get sub moveto
        @args /width get 0 rlineto
        0 @args /height get neg rlineto
        @args /width get neg 0 rlineto
        0 @args /height get rlineto
      stroke
    grestore
  end } bind def

  /repeat_char { 3 dict begin
    0 get /cnum exch def
    /slen exch def
    /sout slen string def
    0 1 slen 1 sub { sout exch cnum put } for
    sout
  end } def

  /substr { 3 dict begin
    /slen exch def
    /sidx exch def
    /sorig exch def
    sidx 0 lt { sorig length sidx add /sidx exch def } if
    sorig sidx slen getinterval
  end } def

  /putstr { 3 dict begin
    /snew exch def
    /sidx exch def
    /sdest exch def
    sidx 0 lt { sdest length sidx add /sidx exch def } if
    sdest sidx snew putinterval
  end } def

  /float2fixed { 5 dict begin
    /fracLen exch def
    /fracFactor 10 fracLen exp def
    % work-around for float cvs Bug in evince:
    fracFactor mul round cvi 10 mul /fixedStr exch def
    /fixedStr fixedStr 16 string cvs def
    fixedStr length fracLen le {
      /fracStart fixedStr def
      /fixedStr fracLen 2 add (0) repeat_char def
      fixedStr 2 fracStart putstr
    } if
    /fracStart fracLen neg 1 sub def
    /fracStr fixedStr fracStart fracLen /substr PMBPS def
    fixedStr fracLen neg fracStr /putstr PMBPS
    fixedStr fracStart (,) /putstr PMBPS
    fixedStr
  end } def

  /debug_show {
    200 string    % create a temporary string buffer
    cvs           % fill it with a stringification of the topmost object
    0 0 moveto show    % print that string
  } def

  /render_as_overlay { 2 dict begin
    TODO
  end } def



  /LIB_SIMPLE_PS_PMB_autoexec dup defined { cvx exec } { pop } ifelse
end %%autoupdate:LIB_SIMPLE_PS_PMB:end%%





























%#scroll#
